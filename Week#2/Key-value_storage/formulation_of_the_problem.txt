Key-value сховище

На цьому тижні ми з вами реалізуємо власне key-values сховище. Дані зберігатимуться у файлі storage.data. Додавання нових даних до сховища та отримання поточних значень здійснюється за допомогою утиліти командного рядка storage.py. Приклад роботи утиліти:

Збереження значення value за ключом key_name:
$ storage.py --key key_name --val value

Отримання значення ключа key_name:
$ storage.py --key key_name

Вашим завданням буде написати реалізацію утиліти storage.py.

Утиліта може викликатися з наступними параметрами:
--key <ім'я ключа> , де <ім'я ключа> - ключ за яким зберігаються/отримуються значення
--val <значення>, де <значення> - значення, що зберігається.

Якщо при запуску утиліти передано обидва ключі, відбувається додавання переданого значення по ключу та збереження даних у файлі. Якщо передано лише ім'я ключа, відбувається читання файлу сховища та виведення на друк значень, збережених за цим ключем. Зверніть увагу, що значення по одному ключу не перезаписуються, а додаються до збережених. Іншими словами – по одному ключу можуть зберігатися кілька значень. При виведенні на друк значення виводяться в порядку їх додавання до сховища. Формат виведення на друк для кількох значень:
value_1, value_2

Зверніть увагу на пробіл після коми. Якщо значень ключа не було знайдено, виведіть порожній рядок або None.

Для роботи з аргументами командного рядка використовуйте модуль argparse (href='https://docs.python.org/3/howto/argparse.html'). Зберігати дані у файлі ми рекомендуємо у форматі JSON за допомогою модуля стандартної бібліотеки json (href='https://docs.python.org/3/library/json.html'). Перш ніж надсилати ваше рішення на перевірку, протестуйте роботу вашої утиліти на додавання кількох ключів та різних значень.

Файл слід створювати за допомогою модуля tempfile (href='https://docs.python.org/3/library/tempfile.html').
import os
import tempfile
storage_path = os.path.join(tempfile.gettempdir(), 'storage.data')
with open(storage_path, 'w') as f:
   ...

Приклад роботи:
$ python storage.py --key key_name --val value
$ python storage.py --key key_name
value
$ python storage.py --key multi_key --val value1
$ python storage.py --key multi_key --val value2
$ python storage.py --key multi_key
value1, value2