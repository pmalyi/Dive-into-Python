Класи та успадкування
Як правило завдання на класи не мають обчислювального характеру. Зазвичай слід написати класи, які відповідають певним інтерфейсам.
Наскільки зручні ці інтерфейси і як пов'язані класи між собою, визначить легкість їх використання у майбутніх програмах.

Припустимо є дані про різні автомобілі та спецтехніку. Дані представлені як таблиці з характеристиками. Вся техніка поділена
на три види: спецтехніка, легкові та вантажні автомобілі. Зверніть увагу на те, що деякі характеристики притаманні лише певному
виду техніки. Наприклад, легкові автомобілі мають характеристику «кількість пасажирських місць», а вантажні автомобілі —
габарити кузова: «довжина», «ширина» і «висота».
----------------------------------------------------------------------------------------------------------------------------
| Тип        | Марка |Кількість пасажирських місць| Фото            |Кузов ДxШxВ, м|Вантажопідйомність, Тонн|Додатково     |
|(car_type)  |(brand)|(passenger_seats_count)     |(photo_file_name)|(body_lwh)    |(carrying)              |(extra)       |
----------------------------------------------------------------------------------------------------------------------------
|car         |Nissan | 4                          | f1.jpeg         |              | 2.5                    |              |
|            |xTtrail|                            |                 |              |                        |              |
----------------------------------------------------------------------------------------------------------------------------
|truck       |Man    |                            | f2.jpeg         | 8x3x2.5      | 20                     |              |
----------------------------------------------------------------------------------------------------------------------------
|car         |Mazda 6| 4                          | f3.jpeg         |              | 2.5                    |              |
----------------------------------------------------------------------------------------------------------------------------
|spec_machine|Hitachi|                            | f4.jpeg         |              | 1.2                    |Легка техніка |
|            |       |                            |                 |              |                        |для прибирання|
|            |       |                            |                 |              |                        |снігу         |
----------------------------------------------------------------------------------------------------------------------------

Вам необхідно створити свою ієрархію класів для даних, описаних у таблиці. Класи повинні називатися CarBase (базовий клас для всіх
типів машин), Car (легкові автомобілі), Truck (вантажні автомобілі) та SpecMachine (спецтехніка). Усі об'єкти мають обов'язкові атрибути:
- car_type, значення типу об'єкта може приймати одне з значень: «car», «truck», «spec_machine».
- photo_file_name, ім'я файлу із зображенням машини, допустимі назви файлів зображень з розширенням зі списку: ".jpg", ".jpeg", ".png", ".gif"
- brand, марка виробника машини
- carrying, вантажопідйомність

У базовому класі CarBase необхідно реалізувати метод get_photo_file_ext для отримання розширення файлу зображення. Розширення файлу можна
отримати за допомогою os.path.splitext.

Для вантажного автомобіля необхідно в конструкторі класу визначити атрибути: body_length, body_width, body_height, які відповідають
за відповідні габарити кузова - довжину, ширину та висоту. Габарити передаються у параметрі body_lwh як рядок, у якому розміри розділені
латинською літерою "x"). Зверніть увагу на те, що характеристики кузова повинні бути дійсними числами і характеристики кузова можуть бути
не валідними (наприклад, порожній рядок). У такому випадку всім атрибутам, що відповідають за габарити кузова, надається значення,
що дорівнює нулю.

Також для класу вантажного автомобіля необхідно реалізувати метод get_body_volume, що повертає об'єм кузова.

У класі Car повинен бути визначений атрибут passenger_seats_count (кількість пасажирських місць), а клас SpecMachine — extra (додатковий
опис машини).

Повна інформація про атрибути класів наведена в таблиці нижче, де 1 - означає, що атрибут є обов'язковим для об'єкта, 0 - атрибут повинен
бути відсутнім.

-----------------------------------------------------
|                       | Car | Truck | SpecMachine |
-----------------------------------------------------
| car_type              | 1   | 1     | 1           |
-----------------------------------------------------
| photo_file_name       | 1   | 1     | 1           |
-----------------------------------------------------
| brand                 | 1   | 1     | 1           |
-----------------------------------------------------
| carrying              | 1   | 1     | 1           |
-----------------------------------------------------
| passenger_seats_count | 1   | 0     | 0           |
-----------------------------------------------------
| body_width            | 0   | 1     | 0           |
-----------------------------------------------------
| body_height           | 0   | 1     | 0           |
-----------------------------------------------------
| body_length           | 0   | 1     | 0           |
-----------------------------------------------------
| extra                 | 0   | 0     | 1           |
-----------------------------------------------------

Зверніть увагу, що кожен об'єкт з ієрархії повинен мати свій набір атрибутів і методів. Наприклад, клас легковика не повинен мати метод
get_body_volume на відміну від класу вантажного автомобіля. Імена атрибутів та методів повинні збігатися з тими, що описані вище.

Далі вам необхідно реалізувати функцію get_car_list, на вхід якої подається ім'я файлу у форматі CSV. Файл містить дані, аналогічні
рядкам таблиці. Вам необхідно прочитати цей файл за допомогою модуля стандартної бібліотеки CSV. Потім проаналізувати рядки на валідність
та створити список об'єктів з автомобілями та спеціальною технікою. Ця функція повинна повертати список об'єктів.

Для налагодження роботи функції get_car_list можна використовувати csv-файл (coursera_week3_cars.csv)

Перший рядок у вихідному файлі — це заголовок CSV, який містить імена колонок. Потрібно пропустити перший рядок із вихідного файлу.
Зверніть увагу на те, що в деяких рядках вихідного файлу дані можуть бути заповнені некоректно, наприклад, відсутні обов'язкові поля
або мати не валідне значення. У такому разі потрібно проігнорувати подібні рядки та не створювати об'єкти. Рядки з порожнім чи не валідним
значенням для body_lwh не повинні ігноруватися. Ви можете використовувати стандартний механізм обробки винятків у процесі читання,
валідації та створення об'єктів із рядків CSV-файлу. Перевірте роботу вашого коду із вхідним файлом, перш ніж завантажувати завдання для
оцінки.

Приклад коду, який демонструє читання csv файлу:

import csv

with open(csv_filename) as csv_fd:
     reader = csv.reader(csv_fd, delimiter=';')
     next(reader) # пропускаємо заголовок
     for row in reader:
         print(row)

Нижче наведено шаблон коду для виконання завдання:

class CarBase:
    def __init__(self, brand, photo_file_name, carrying):
        pass


class Car(CarBase):
    def __init__(self, brand, photo_file_name, carrying, passenger_seats_count):
        pass


class Truck(CarBase):
    def __init__(self, brand, photo_file_name, carrying, body_whl):
        pass


class SpecMachine(CarBase):
    def __init__(self, brand, photo_file_name, carrying, extra):
        pass


def get_car_list(csv_filename):
    car_list = []
    return car_list

Декілька прикладів роботи:

>>> from solution import *
>>> car = Car('Bugatti Veyron', 'bugatti.png', '0.312', '2')
>>> print(car.car_type, car.brand, car.photo_file_name, car.carrying,
... car.passenger_seats_count, sep='\n')
car
Bugatti Veyron
bugatti.png
0.312
2
>>> truck = Truck('Nissan', 'nissan.jpeg', '1.5', '3.92x2.09x1.87')
>>> print(truck.car_type, truck.brand, truck.photo_file_name, truck.body_length,
... truck.body_width, truck.body_height, sep='\n')
truck
Nissan
nissan.jpeg
3.92
2.09
1.87
>>> spec_machine = SpecMachine('Komatsu-D355', 'd355.jpg', '93', 'pipelayer specs')
>>> print(spec_machine.car_type, spec_machine.brand, spec_machine.carrying,
... spec_machine.photo_file_name, spec_machine.extra, sep='\n')
spec_machine
Komatsu-D355
93.0
d355.jpg
pipelayer specs
>>> spec_machine.get_photo_file_ext()
'.jpg'
>>> cars = get_car_list('cars_week3.csv')
>>> len(cars)
4
>>> for car in cars:
...     print(type(car))
...
<class 'solution.Car'>
<class 'solution.Truck'>
<class 'solution.Truck'>
<class 'solution.Car'>
>>> cars[0].passenger_seats_count
4
>>> cars[1].get_body_volume()
60.0
>>>

Бажаю успіхів!
